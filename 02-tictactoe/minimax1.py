# -*- coding: utf-8 -*-
"""minimax1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CziaXZNJyZy7Isf4R1w1Mxu9OOLbCuuV
"""
conditions = [
            (0,1,2),(3,4,5),(6,7,8),  # rows
            (0,3,6),(1,4,7),(2,5,8),  # cols
            (0,4,8),(2,4,6)           # diags
        ]

class game_sate:
    def __init__(self, board: str, next_player: str, parent=None):
        self.board = board
        self.next_player = next_player
        self.parent = parent

    def get_substates(self):
        substates = []
        nextplayer = "0" if self.next_player == "X" else "X"
        for nr in range(9):
            if self.board[nr] == ".":
                st=list(self.board)
                st[nr]=self.next_player
                substates.append(game_sate("".join(st),nextplayer,self))
        return substates

    def get_score(self):
        for a,b,c in conditions:
            if self.board[a] != "." and self.board[a] == self.board[b] and self.board[a] == self.board[c]:
                if self.board[a] == "X":
                    return (True, 10)
                else:
                    return (True, -10)
        if "." not in self.board:
            return (True, 0)
        return (False, "?")

    def print(self):
        s = self.board
        print("Board:")
        print(s[0], s[1], s[2])
        print(s[3], s[4], s[5])
        print(s[6], s[7], s[8])
        print("To play: ", self.next_player)
        print("")

                

def minimax(state: game_sate, depth = 0):
    result = state.get_score()
    if result[0]:
        if result[1] > 0:
            score = result[1]-depth
            return (score, state)
        elif result[1] < 0:
            score = result[1]+depth
            return (score, state)
        else:
            return (0,state)
    if state.next_player == "X":
        best_score = (-99, state)
        for ss in state.get_substates():
            result = minimax(ss, depth+1)   
            if result[0] > best_score[0]:
                best_score = result
        return best_score
    else:
        best_score = (99, state)
        for ss in state.get_substates():
            result = minimax(ss,depth+1)   
            if result[0] < best_score[0]:
                best_score = result
        return best_score
    
board="....X...."
result = minimax(game_sate(board, "0"))
state = result[1]
path = []
while state != None:
    path.append(state)
    state = state.parent

for p in path[::-1]:
    p.print()
